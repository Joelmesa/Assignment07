public class FastQ {

    private String[] array;
    private int size;
    private int used;
    private int front;
    private int back;

    private static final int DEFAULT_SIZE = 4;

    /** Full constructor */
    public FastQ(int size) {
        if (size < 1) {
            size = DEFAULT_SIZE;
        }
        this.size = size;
        this.array = new String[this.size];
        this.used = 0;
        this.front = 0;
        this.back = 0;
    } // full constructor

    /** Default constructor */
    public FastQ() {
        this(DEFAULT_SIZE);
    } // default constructor

    /** Adds a string to the queue in constant time */
    public boolean add(String string) {
        // Check if the queue is full
        if (this.used < this.size) {
            this.array[this.back] = string;  // Add string at the back
            this.back = (this.back + 1) % this.size;  // Move back pointer circularly
            this.used++;
            return true;  //added
        }
        return false;  // Queue is full
    } // method add

    /** Removes a string from the queue in constant time */
    public String remove() {
        // Check if the queue is empty
        if (this.used > 0) {
            String removed = this.array[this.front];  // Get the string at the front
            this.array[this.front] = null;  // Clear the removed element
            this.front = (this.front + 1) % this.size;  // Move front pointer circularly
            this.used--;
            return removed;  // Return the removed element
        }
        return null;  // Queue is empty
    } // method remove
    
} // class FastQ
